import sys
sys.path.append('C:/Users/Administrator/AppData/Local/Programs/FreeCAD 0.21/bin')
sys.path.append('C:/Users/Administrator/AppData/Local/Programs/FreeCAD 0.21/lib')
import FreeCAD

import GA_utils

import FreeCAD
import Part
import Mesh
import MeshPart

import time
sys.path.append('C:/Users/Administrator/OneDrive - Pharos Marine/바탕 화면/bop-main/bop-main/writejson.py')
import writejson


start_time = time.time()
# File paths for FreeCAD parts
file1_path = "C:/Users/Administrator/OneDrive - Pharos Marine/바탕 화면/1. Calix Engine Heater.FCStd"
file2_path = "C:/Users/Administrator/OneDrive - Pharos Marine/바탕 화면/2. 3-way solenoid valve.FCStd"



# Function to load FreeCAD part from FCStd file
def load_freecad_part(file_path):
    try:
        doc = FreeCAD.open(file_path)
        FreeCAD.setActiveDocument(doc.Name)
        return doc
    except Exception as e:
        print(f"Error loading part: {e}")
        return None

temp = 0.0
test_num=0
# Load parts from files
doc1 = load_freecad_part(file1_path)
doc2 = load_freecad_part(file2_path)

doc = FreeCAD.newDocument("GeneticAlgorithmBoundingBox")

if doc1 and doc2:
    part1 = None
    part2 = None
    for obj in doc1.Objects:
        if hasattr(obj, 'Shape') and obj.Shape.Volume > 0:
            part1 = obj
            test_num+=1
            break
    for obj in doc2.Objects:
        if hasattr(obj, 'Shape') and obj.Shape.Volume > 0:
            part2 = obj
            test_num-=1
            break
    print("test_num(0) : ",test_num)
    if part1 and part2:
        obj1 = doc.addObject("Part::Feature", "Part1")
        obj2 = doc.addObject("Part::Feature", "Part2")
        obj1.Shape = part1.Shape
        obj2.Shape = part2.Shape

        # Apply the original placement from the source documents
        obj1.Placement = part1.Placement
        obj2.Placement = part2.Placement

        doc.recompute()
    else:
        print("Failed to find valid parts in the documents.")
        exit()
else:
    print("Failed to load parts.")
    exit()


# Run Genetic Algorithm
GA_utils.genetic_algorithm(obj1, obj2, 1000, 60, 0.05, doc) #population, generation, mutation rate

end_time = time.time()
print(f"\uC2E4\uD589 \uC2DC\uAC04: {end_time - start_time:.4f} \uCD08")

